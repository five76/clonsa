Облачные вычисления (англ. cloud computing) — модель обеспечения удобного сетевого доступа по требованию к некоторому общему фонду конфигурируемых вычислительных ресурсов (например, сетям передачи данных, серверам, устройствам хранения данных, приложениям и сервисам — как вместе, так и по отдельности), которые могут быть оперативно предоставлены и освобождены с минимальными эксплуатационными затратами или обращениями к провайдеру.

Предоставление пользователю услуг как Интернет-сервис является ключевым. Однако под Интернет-сервисом не стоит понимать доступ к сервису только через Интернет, он может осуществляться также и через обычную локальную сеть с использованием веб-технологий.

Основой для создания и быстрого развития облачных вычислительных систем послужили крупные интернет сервисы, такие как Google, Amazon и др, а так же технический прогресс, что по сути говорит о том что появление облачных вычислений было всего лишь делом времени. Доступность облачных вычислений стало доступно по следующим причинам:

1. Развитие многоядерных процессоров привело к:

— увеличению производительности, при тех же размерах оборудования;

— снижение стоимости оборудования, как следствие эксплуатационных расходов;

— снижение энергопотребления облачной системы, для большинства ЦОД это действительно проблема при наращивании мощностей ЦОД.
2. Увеличение емкостей носителей информации, снижение стоимости хранения 1 Мб информации позволило:

— безгранично (по крайней мере так позиционируют себя большинство «облаков») увеличить объемы хранимой информации;

— снизить стоимость обслуживания хранилищ информации, значительно увеличив объемы хранимых данных.

3. Развитие технологии многопоточного программирования привело к:
— эффективному использованию вычислительных ресурсов многопроцессорных систем;
— гибкое распределение вычислительных мощностей облаков.

4. Развитие технологий виртуализации привело к:

— созданию программного обеспечения позволяющего создавать виртуальную инфраструктуру не зависимо от количества предоставленных аппаратных ресурсов;

— легкость масштабирования, наращивания систем;

— уменьшение расходов на администрирование облачных систем;

— доступность виртуальной инфраструктуры через сеть Интернет.

5. Увеличении пропускной способности привело к:
— увеличению скорости работы с облачными системами в частности виртуальный графический интерфейс и работа с виртуальными носителями информации;

— снижение стоимости Интернет трафика для работы с большими объемами информации;

— проникновению облачных вычислений в массы.

Все вышеперечисленные факторы привели к повышению конкурентоспособности облачных вычислений в ИТ сфере.

Достоинства:
~~~~~~~~~~~~~~

**доступность** – облака доступны всем, из любой точки, где есть Интернет, с любого компьютера, где есть браузер. Это позволяет пользователям (предприятиям) экономить на закупке высокопроизводительных, дорогостоящих компьютеров. Также сотрудники компаний становятся более мобильными так, как могут получить доступ к своему рабочему месту из любой точки земного шара, используя ноутбук, нетбук, планшетник или смартфон. Нет необходимости в покупки лицензионного ПО, его настройки и обновлении, вы просто заходите на сервис и пользуетесь его услугами заплатив за фактическое использование.

**низкая стоимость** – основные факторы снизившие стоимость использования облаков следующие:

— снижение расходов на обслуживания виртуальной инфраструктуры, вызванное развитием технологий виртуализации, за счет чего требуется меньший штат для обслуживания всей ИТ инфраструктуры предприятия;

— оплата фактического использования ресурсов, пользователь облака платит за фактическое использование вычислительных мощностей облака, что позволяет ему эффективно распределять свои денежные средства. Это позволяет пользователям (предприятиям) экономить на покупке лицензий к ПО;

— использование облака на правах аренды позволяет пользователям снизить расходы на закупку дорогостоящего оборудования, и сделать акцент на вложение денежных средств на наладку бизнес процессов предприятия, что в свою очередь позволяет легко начать бизнес;

— развитие аппаратной части вычислительных систем, в связи с чем снижение стоимости оборудования.

**гибкость** — неограниченность вычислительных ресурсов (память, процессор, диски), за счет использования систем виртуализации, процесс масштабирования и администрирования «облаков» становиться достаточно легкой задачей, так как «облако» самостоятельно может предоставить вам ресурсы, которые вам необходимы, а вы платите только за фактическое их использование.

**надежность** – надежность «облаков», особенно находящихся в специально оборудованных ЦОД, очень высокая так, как такие ЦОД имеют резервные источники питания, охрану, профессиональных работников, регулярное резервирование данных, высокую пропускную способность Интернет канала, высокая устойчивость к DDOS атакам.

**безопасность** – «облачные» сервисы имеют достаточно высокую безопасность при должном ее обеспечении, однако при халатном отношении эффект может быть полностью противоположным.
большие вычислительные мощности – вы как пользователь «облачной» системы можете использовать все ее вычислительные способности, заплатив только за фактическое время использования. Предприятия могут использовать данную возможность для анализа больших объемов данных.

Недостатки
~~~~~~~~~~

* постоянное соединение с сетью – для получения доступа к услугам «облака» необходимо постоянное соединение с сетью Интернет. Однако в наше время это не такой и большой недостаток особенно с приходом технологий сотовой связи 3G и 4G.

* программное обеспечение и его кастомизация – есть ограничения по ПО которое можно разворачивать на «облаках» и предоставлять его пользователю. Пользователь ПО имеет ограничения в используемом ПО и иногда не имеет возможности настроить его под свои собственные цели.

* конфиденциальность – конфиденциальность данных хранимых на публичных «облаках» в настоящее вызывает много споров, но в большинстве случаев эксперты сходятся в том, что не рекомендуется хранить наиболее ценные для компании документы на публичном “облаке”, так как в настоящее время нет технологии которая бы гарантировала 100% конфиденциальность хранимых данных.

* надежность – что касается надежности хранимой информации, то с уверенностью можно сказать что если вы потеряли информацию хранимую в “облаке”, то вы ее потеряли навсегда.

* безопасность – “облако” само по себе является достаточно надежной системой, однако при проникновении на него злоумышленник получает доступ к огромному хранилищу данных. Еще один минус это использование систем виртуализации, в которых в качестве гипервизора используются ядра стандартные ОС такие, как Linux, Windows и др., что позволяет использовать вирусы.

* дороговизна оборудования – для построения собственного облака компании необходимо выделить значительные материальные ресурсы, что не выгодно только что созданным и малым компаниям.

Отличие облака от других вариантов размещения
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Вычисления
"""""""""""

Подготовка вашей машины будет быстрой.
По сравнению с размещенным или локальным хостингом подготовка выполняется значительно быстрее. В реальном выражении типичное ожидаемое время от нажатия кнопки до подключения через безопасную
оболочку к машине составит около минуты. Что еще интереснее, так это то, чего не хватает в процессе включения облачной виртуальной машины (ВМ). Если вы включите виртуальную машину прямо сейчас, вы можете заметить, что там нет упоминания об оплате. По сравнению с обычным виртуальным частным сервером (VPS), где цена установлена заранее и покупка  VPS осуществляется на полный год, производя ежемесячные платежи (с немедленным первым платежом и, возможно, скидкой на авансовый платеж) облачные провайдеры не взымают плату сразу так как они не знают, как долго вы будете поддерживать эту машину в рабочем состоянии. Поэтому невозможно узнать, какой счет выставить клиенту. Это можно определить, сколько вы должны только либо месяца или когда будет выключена виртуальна машина. 

.. figure:: 00_compare.png
       :scale: 100 %
       :align: center
       :alt: asda
       
Хранение (storage)
"""""""""""""""""""

Хранилище является необходимым для вычислений.
Что будет происходить с данными по окончании работы? Облачный подход к хранению данных следует той же схеме, которая  используется в области вычислений, абстрагируясь от управления физическими ресурсами. 

Хранение данных - сложная задача. Например, необходимо чтобы данные были кэшированы по краям, чтобы ускорить загрузку для пользователей в Интернете? Оптимизируется пропускная способность или задержка? Это нормально, если “время для первого байт” - это несколько секунд? Насколько доступными должны быть данные? Сколько клиентов нужно поддерживать? Ответы на эти вопросы существенно меняют то, что вы создаете , настолько, что в конечном итоге вы могли бы создавать совершенно другие продукты, если бы вы создавали службу хранения. В конечном счете, абстракция, предоставляемая службой хранения, предоставляет возможность настраивать механизмы хранения для различных уровней производительности, долговечности, доступности и стоимости. 

Но эти системы имеют несколько компромиссов. 

Во-первых, сбои при хранении данных обычно приводят к их исчезановению. Клиент не должны получать уведомлений с сообщением, что произошел сбой жесткого диска и данные были потеряны. Далее, при использовании опций с ограниченной доступностью можно время от времени пытаться загрузить данные и получать сообщение об ошибке с просьбой повторить попытку позже, но оплата будет гораздо меньше за хранилище этого класса , чем за любое другое. Наконец, для виртуальных дисков в облаке есть множество вариантов того, как хранить данные, как в емкости (измеряемой в ГБ), так и в производительность (обычно измеряется в операциях ввода-вывода в секунду [IOPS]). Опять же, как и вычисления в облаке, хранение данных на виртуальных дисках в облаке кажется знакомым. С другой стороны, некоторые пользовательские службы баз данных, такие как Облачное хранилище данных, могут показаться немного чуждыми. Эти системы во многих отношениях полностью уникальны для облачного хостинга. Они опираются на огромные, общие, масштабируемые системы. Например, Cloud Datastore представляет собой адаптированную внешнюю реализацию внутренней системы хранения данных под названием Megastore, которая до недавнего времени была базовой системой хранения для многих продуктов Google, включая Gmail. Эти размещенные системы хранения данных иногда требовали , чтобы выполнялась интеграция собственного кода с собственным API. Это означает, что очень важно поддерживать надлежащий уровень абстракции базой кода и уровнем хранилища. Все еще может иметь смысл полагаться на эти размещенные системы, особенно потому, что все масштабирование выполняется автоматически.

Аналитика (BigData)
""""""""""""""""""""""""

Большинство предприятия генерируют огромное количество информации и хранится практически все. Это необходимо анализировать и использовать, чтобы получать ноые и интересные выводы. Это также означает, что для того, чтобы сделать эти огромные объемы данных более управляемыми, появляются новые и интересные проекты с открытым исходным кодом, такие как Apache Spark, HBase и Hadoop. Многие крупные компании, предлагающие облачный хостинг, также используют эти системы. Облачные провайдеры не исключение.

Сети (Networking) 
""""""""""""""""""

Наличие множества различных элементов инфраструктуры без возможности взаимодействия этих элементов друг с другом означает, что система не является единой системой - это скорее куча изолированных систем. Традиционно сетевая работа подразумевается как нечто само собой разумеющееся, как то, что должно работать. Например, когда осуществляется регистрация на виртуальный частный хостинг и получеен доступ к серверу, ожидается, что у него есть подключение к Интернету и что оно будет достаточно быстрым. 

В мире облачных вычислений некоторые из этих допущений остаются неизменными. Но "облака" имеют более продвинутые особенности, такие как более быстрые, чем обычно, сетевые подключения, дополнительные свойства брандмауэров (где разрешены соединения определенных IP-адресов с определенными портами), балансировка нагрузки (где запросы поступают и могут обрабатываться одной из многих машин), и SSL сертификат управления (где запросы должны быть зашифрованы, но не управляется сертификатом для каждой виртуальной машины). 

Сеть на традиционном хостинге обычно скрыта, поэтому большинство людей не заметит никаких различий. Для тех, у кого есть глубокие знания в области сетевых технологий, большинство вещей, которые можно сделать с обычным вычислительным стеком (например, настроить VPN, настроить брандмауэры с iptables и сбалансировать запросы между серверами с помощью HAProxy), все еще возможны. Сетевые функции Google Cloud действуют только для упрощения распространенных случаев, когда вместо запуска отдельной виртуальной машины с помощью HAProxy необходимо полагаться на облачный балансировщик нагрузки Google для маршрутизации запросов.

Есть мнение, что в будущем каждая компания, независимо от размера или отрасли, будет дифференцировать себя от своих конкурентов через технологии во многом в виде программного обеспечения, большое программное обеспечение, ориентированное на данные. Таким образом, каждая компания станет компанией данных.

**Google Cloud Platform** (рус. «Облачная платформа Google», сокр.  GCP) — предоставляемый компанией Google набор облачных служб, которые выполняются на той же самой инфраструктуре, которую Google использует для своих продуктов, предназначенных для конечных потребителей, таких как Google Search и YouTube. Кроме инструментов для управления, также предоставляется ряд модульных облачных служб, таких как облачные вычисления, хранение данных, анализ данных и машинное обучение. Для регистрации нужно иметь банковскую карту или банковский счет

GCP - это набор коммерческих облачных сервисов, основанных на разработках и опыте Google в для 
собственных  продуктов:
● Google Search
● YouTube
● Google Maps
● и др.

Сервисы GCP:
''''''''''''

**App Engine** — платформа как услуга для хостинга приложений.
**BigQuery** — инфраструктура как услуга, масштабируемая аналитика для баз данных.
**BigTable** — инфраструктура как услуга, масштабируемая NoSQL база данных.
**Cloud AutoML** — набор продуктов для машинного обучения, которые позволяет разработчикам с ограниченным опытом работы в области машинного обучения использовать технологии обучения и создания нейронных сетей.
**Cloud Datastore** — документоориентированная облачная база данных.
**Cloud Pub/Sub** — услуга для публикации и подписки на потоки данных и сообщения. Приложения могут обмениваться данными через публикацию / подписку, без прямого обмена сообщениями.
**Compute Engine** — инфраструктура как услуга, предоставляет виртуальные машины.
**Kubernetes Engine**— система автоматического развертывания, масштабирования и управления приложений в контейнерах для Kubernetes.
**Google Genomics** — анализ геномов в облаке
**Google Video Intelligence**
**Cloud Vision**
**Storage** — инфраструктура как услуга, предоставляет онлайн REST-доступ к файлам и содержанию хранилищ данных.

.. figure:: 00_gcpnow.png
       :scale: 100 %
       :align: center
       :alt: asda


Interacting with Google Cloud Platform 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

Существует четыре способа взаимодействия с Google Cloud Platform: Консоль, SDK и Cloud Shell, Мобильное приложение и API. 

GCP Console представляет собой веб-интерфейс администрирования. Если создаеся приложение в GCP, будет использоваться  GCP Console. Это позволяет просматривать и управлять всеми вашими проектами и всеми ресурсами, которые они используют. Также позволяет включать, отключать и изучать API служб GCP. Предоставляет доступ к Cloud Shell. 

Это интерфейс командной строки для GCP, который легко доступен из браузера. Из Cloud Shell можно использовать инструменты, предоставляемые пакетом Google Cloud Development kit SDK, без необходимости сначала устанавливать их где-нибудь.

Google Cloud SDK представляет собой набор инструментов, которые можно использовать для управления ресурсами и приложениями на GCP. К ним относится инструмент **gcloud**, который предоставляет основной интерфейс командной строки для продуктов и сервисов Google Cloud Platform. Существует также **gsutil**, который предназначен для облачного хранилища Google и bq, который предназначен для BigQuery. Самый простой способ добраться до команд SDK - нажать на кнопку Cloud Shell на консоли GCP. Можно установить SDK на собственные компьютеры - ноутбук, локальные серверы виртуальных машин и другие облака. SDK также доступен в виде изображения докера. Услуги, которые составляют GCP, предлагают интерфейсы прикладного программирования (API). Эти API - это то, что называется RESTful.

Ресурсы имен API и GCP имеют URL-адреса. Ваш код может передавать информацию в API с помощью JSON, который является очень популярным способом передачи текстовой информации через Интернет. И есть открытая система для входа пользователя и контроля доступа. Консоль GCP позволяет включать и выключать API. Многие API отключены по умолчанию, и многие связаны с квотами и ограничениями. Эти ограничения помогают защитить проекты от непреднамеренного использования ресурсов. Можно включить только те API, которые вам нужны, и запрашивать увеличение квот, когда вам нужно больше ресурсов. Например, если вы пишете приложение, которое должно контролировать ресурсы GCP, вам нужно будет правильно использовать API. И для этого вы будете использовать API Explorer. Консоль GCP включает инструмент под названием обозреватель API, который помогает интерактивно узнать об API. Он позволяет увидеть, какие API доступны и в каких версиях. Эти API ожидают параметры и имеют встроеннцю документацию. API можно использовать в интерактивном режиме даже при аутентификации пользователя. Нет необходимости выполнять программирование с нуля, так как Google предоставляет клиентские библиотеки, которые выполняют многие задачи вызова GCP из кода. 

Существует два вида библиотек. Облачные клиентские библиотеки являются облаками Google последними и рекомендуемыми библиотеками для своих API. Они перенимают родные стили и идиомы каждого языка. С другой стороны, иногда библиотека Cloud Client Library не поддерживает новейшие сервисы и функции. В этом случае можно использовать клиентскую библиотеку Google API для нужных вам языков. Эти библиотеки предназначены для общности и полноты. 
  

Cloud Marketplace (formerly Cloud Launcher)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Это инструмент для быстрого развертывания функциональных пакетов программного обеспечения на Google Cloud Platform. Нет необходимости вручную настраивать программное обеспечение, экземпляры виртуальной машины, параметры хранилища или сети. Большинство пакетов программного обеспечения в Cloud Launcher не взимается дополнительная плата, сверх обычной платы за использование ресурсов GCP. Некоторые изображения Cloud Launcher взимают плату с пользователей, в частности, за те, которые опубликованы третьими лицами с коммерчески лицензированным программным обеспечением. Но все они показывают вам оценки их ежемесячные сборы, прежде чем вы их запускаете. В частности, они не оценивают затраты на сеть , поскольку они будут различаться в зависимости от того, как используются приложения. 

GCP обновляет базовые образы для пакетов программного обеспечения, чтобы устранить критические проблемы и уязвимости. Но не обновляет программное обеспечение после его развертывания.














